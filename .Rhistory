segments
rgl::segments3d
lines
lines.default
plot.xy
plot.default
?rgl::segments3d
library(mesh2d)
?segments
library(mesh2d)
library(mesh2d)
library(mesh2d)
segments2d(runif(10), runif(10))
segments
?plot.new
par("new")
plot(1)
par("new")
graphics.off()
par("new")
?par
library(stars)
data.frame(X = runif(100, -1000, 1000),
Y = runif(100, -10000, 2000)) %>%
st_as_sf(coords = c("X", "Y")) %>%
st_bbox() %>%
st_as_sfc() %>%
st_buffer(100) %>%
st_bbox() %>%
st_as_stars(dx = 100)
par("page")
graphics.off()
par("page")
plot(1)
par("page")
graphics.off()
segments2d(0, 1, 0, 1)
segments(0, 1, 0, 1)
points(NA, type = "n")
plot(1)
points(NA, type = "n")
?tryCatch
tryCatch(points(NA, type = "n"), error = FALSE)
graphics.off()
tryCatch(points(NA, type = "n"), error = FALSE)
tryCatch(points(NA, type = "n"), error = function() TRUE)
library(mesh2d)
segments2d(runif(10), runif(10))
x <- xy.coords(runif(10), runif(10))
str(x)
test <- tryCatch(points(NA, type = "n"),
error = function(c) TRUE)
test
library(mesh2d)
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
graphics.off()
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
devtools::load_all(".")
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
graphics.off()
segments2d(runif(10), runif(10))
devtools::load_all(".")
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
graphics.off()
segments2d(runif(10), runif(10))
devtools::load_all(".")
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10), add = F)
xy <- xy.coords(1, 1)
xy
graphics.off()
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10), add = F)
segments2d(runif(10), runif(10))
plot(1, 1, asp = "", type = "n")
plot(1, 1, asp = "", type = "n")
plot(1, 1, asp = "", type = "n")
plot(1, 1, asp = "", type = "n")
debug(segments2)
debug(segments2d)
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
graphics.off()
segments2d(runif(10), runif(10))
graphics.off()
segments2d(runif(10), runif(10))
str(...)
str(list(...))
xx
yy
segments(xx[1L, ], yy[1L, ],
xx[2L, ], yy[2L, ]
)
Q
library(mesh2d)
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
plot(-10:10, -10:10)
segments2d(runif(10), runif(10))
abline(h = 1, col = "transparent")
graphics.off()
abline(h = 1, col = "transparent")
library(mesh2d)
dev.cur()
str(dev.cur())
plot(1)
str(dev.cur())
?dev.cur
names(dev.cur())
graphics.off()
names(dev.cur())
library(mesh2d)
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
segments2d(runif(10), runif(10))
?lines
stats::lowess(cars)
segments2d(stats::lowess(cars))
segments2d(stats::lowess(cars), add = F)
m <- maps::map()
graphics.off()
segments2d(m$x, m$y)
segments2d(m$x, m$y)
segments2d(m$x, m$y)
segments2d(m$x, m$y)
segments2d(m$x, m$y, lwd = 2)
segments2d(m$x, m$y, lwd = 10)
segments2d(m$x, m$y, add = F)
segments2d(m$x[-1], m$y[-1], add = F, col = "firebrick")
segments2d(m$x[-1], m$y, add = F, col = "dodgerblue")
segments2d(m$x[-1], m$y[length(m$y)], add = F, col = "dodgerblue")
segments2d(m$x[-1], m$y[-length(m$y)], add = F, col = "dodgerblue")
?rgl::plot3d
?rgl::lines3d
anglr::mesh_plot
anglr::mesh_plot.default
anglr::mesh_plot.mesh3d
anglr:::mesh_plot.mesh3d
?rep
library(mesh2d)
?polygon
library(mesh2d)
triangles2d(runif(9), runif(9), add = FALSE)
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 3))
#'   acceptable. See the function [xy.coords()] for details
#' @param ... further arguments passed to [polygon()] or [grid.polygon()] WIP
#' @param asp control the aspect ratio of the plot (only when `add = TRUE`)
#' @param add logical, add to current plot or start a new one
#'
#' @return called for its side effect, drawing triangles on a plot
#' @export
#'
#' @examples
#' triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 3))
triangles2d <- function(x, y = NULL, border = NULL, col = NA, ..., asp = "", add = TRUE) {
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
vps <- gridBase::baseViewports()
grid::pushViewport(vps$inner, vps$figure, vps$plot)
grid::grid.polygon(xx$x, xx$y, xx$id, gp = grid::gpar(col = xx$col, fill = xx$col),
default.units = "native")
grid::popViewport(3)
par(mar = rep(0, 4), mfcol = c(20, 10))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
devtools::load_all(".")
par(mar = rep(0, 4), mfcol = c(15, 10))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
for (i in seq_len(15 * 10 - 1)) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 27))
par(mar = rep(0, 4), mfcol = c(15, 10))
for (i in seq_len(15 * 10)) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9))
triangles2d(runif(26), runif(26), add = FALSE, col = sample(colors(), 27))
triangles2d(runif(2), runif(2), add = FALSE, col = sample(colors(), 27))
graphics.off()
library(mesh2d)
usethis::use_gpl3_license()
usethis::use_package("gridBase")
library(mesh2d)
usethis::use_readme_rmd()
usethis::use_code_of_conduct()
triangles2d(rnorm(99), rnorm(99))
segments2d(sort(rnorm(20)), rnorm(20))
segments2d(sort(rnorm(20)), rnorm(20), col = hcl.colors(10))
triangles2d(rnorm(99), rnorm(99), col = gray.colors(33))
quads2d(runif(12), runif(12), border = hcl.colors(3))
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5)
?grid::gpar
devtools::load_all(".")
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5)
library(mesh2d)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue", alpha = 0.5))
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue", alpha = 0.5))
library(mesh2d)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue", alpha = 0.5))
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
library(mesh2d)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
triangles2d(rnorm(99), rnorm(99), col = gray.colors(33))
segments2d(sort(rnorm(20)), rnorm(20), col = hcl.colors(10))
library(mesh2d)
quads2d(runif(12), runif(12), border = hcl.colors(3), lwd = 5, col = c("grey", "firebrick", "dodgerblue"), alpha = 0.5)
triangles2d(rnorm(99), rnorm(99), col = gray.colors(33), add = FALSE)
segments2d(sort(rnorm(20)), rnorm(20), col = hcl.colors(10), add = FALSE)
segments2d(sort(rnorm(20)), rnorm(20), col = hcl.colors(10), add = FALSE, lwd = 30, alpha = .2)
segments2d(sort(rnorm(200)), rnorm(200), col = hcl.colors(10), add = FALSE, lwd = 30, alpha = .2)
segments2d(sort(rnorm(200)), rnorm(200), col = hcl.colors(10), add = FALSE, lwd = 15)
segments2d(sort(rnorm(50)), rnorm(50), col = hcl.colors(10), add = FALSE, lwd = 15)
segments2d(sort(rnorm(20)), rnorm(20), col = hcl.colors(10), add = FALSE)
triangles2d(rnorm(99), rnorm(99), col = gray.colors(33), add = FALSE)
triangles2d(runif(9), runif(9), add = FALSE, col = sample(colors(), 3))
triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9))
par(mfrow = c(15, 10))
system.time(for (i in 1:1000) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9)))
system.time(for (i in 1:1000) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9), add = F))
system.time(for (i in 1:1000) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9)))
par(mfrow = c(15, 10), mar = rep(0, 4))
system.time(for (i in 1:1000) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9)))
(1e9/1000)*10
(1e9/1000)*10/3600
(1e9/1000)*10/(3600 * 24)
system.time(for (i in 1:1000) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9)))
system.time(for (i in 1:(15*20) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9)))
system.time(for (i in 1:(15*20)) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9)))
par(mfrow = c(15, 10), mar = rep(0, 4))
system.time(for (i in 1:(15*20)) triangles2d(runif(27), runif(27), add = FALSE, col = sample(colors(), 9)))
qm <- quadmesh::quadmesh(volcano)
quads2d(qm$vb[1, qm$ib], qm$vb[2, qm$ib], col = colourvalues::color_values(volcano))
quads2d(qm$vb[1, qm$ib], qm$vb[2, qm$ib], col = colourvalues::color_values(volcano), add = FALSE)
graphics.off()
quads2d(qm$vb[1, qm$ib], qm$vb[2, qm$ib], col = colourvalues::color_values(volcano), add = FALSE)
quads2d(qm$vb[1, qm$ib], qm$vb[2, qm$ib], col = colourvalues::color_values(t(volcano)), add = FALSE)
qm$vb <- jitter(qm$vb)
quads2d(qm$vb[1, qm$ib], qm$vb[2, qm$ib], col = colourvalues::color_values(t(volcano)), add = FALSE)
qm <- quadmesh::quadmesh(volcano)
xx <- qm$vb[1, qm$ib]
yy <- qm$vb[2, qm$ib]
quads2d(jitter(xx), jitter(yy), col = colourvalues::color_values(t(volcano)), add = FALSE)
quads2d(jitter(xx), jitter(yy), col = colourvalues::color_values(t(volcano)), add = FALSE, border = NA)
quads2d(jitter(xx, 2), jitter(yy, 3), col = colourvalues::color_values(t(volcano)), add = FALSE, border = NA)
quads2d(jitter(xx, 1.5), jitter(yy, 1.2), col = colourvalues::color_values(t(volcano)), add = FALSE, border = NA)
quads2d(jitter(xx, 1.5), jitter(yy, 1.2), col = colourvalues::color_values(t(volcano)), add = FALSE)
quads2d(jitter(xx, 1.1), jitter(yy, 1.2), col = colourvalues::color_values(t(volcano)), add = FALSE)
tm <- anglr::as.mesh3d(volcano)
xx <- tm$vb[1, tm$it]
yy <- tm$vb[2, tm$it]
quads2d(jitter(xx, 1.1), jitter(yy, 1.2), col = colourvalues::color_values(t(volcano)), add = FALSE)
triangles2d(jitter(xx, 1.1), jitter(yy, 1.2), col = colourvalues::color_values(t(volcano)), add = FALSE)
str(tm)
tm <- anglr::as.mesh3d(raster::raster(volcano))
xx <- tm$vb[1, tm$it]
yy <- tm$vb[2, tm$it]
triangles2d(jitter(xx, 1.1), jitter(yy, 1.2), col = colourvalues::color_values(t(volcano)), add = FALSE)
triangles2d(jitter(xx, 1.1), jitter(yy, 1.2), col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
triangles2d(jitter(xx, 1.5), jitter(yy, 1.5), col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
triangles2d(jitter(xx, 2.5), jitter(yy, 2.5), col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
tm <- anglr::as.mesh3d(raster::raster(volcano), max_triangles = 10000)
xx <- tm$vb[1, tm$it]
yy <- tm$vb[2, tm$it]
triangles2d(jitter(xx, 2.5), jitter(yy, 2.5), col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
tm <- anglr::as.mesh3d(raster::raster(volcano), max_triangles = 1000)
xx <- tm$vb[1, tm$it]
yy <- tm$vb[2, tm$it]
triangles2d(jitter(xx, 2.5), jitter(yy, 2.5), col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
tm <- anglr::as.mesh3d(raster::raster(volcano), max_triangles = 1500)
xx <- tm$vb[1, tm$it]
yy <- tm$vb[2, tm$it]
triangles2d(jitter(xx, 2.5), jitter(yy, 2.5), col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
triangles2d(xx, yy, col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
triangles2d(xx, yy, col = colourvalues::color_values(tm$vb[3, tm$it[1, ]]), add = FALSE)
triangles2d(xx, yy, col = colourvalues::color_values(tm$vb[3, tm$it[2, ]]), add = FALSE)
triangles2d(xx, yy, col = colourvalues::color_values(colMeans(matrix(tm$vb[3, tm$it], 3))), add = FALSE)
## same as in rgl
rgl::triangles3d(xx, yy)
## same as in rgl
rgl::triangles3d(xx, yy, tm$vb[3, tm$it])
aspect3d("iso")
rgl::aspect3d("iso")
rgl::aspect3d(1, 1, .1)
## same as in rgl
rgl::triangles3d(xx, yy, tm$vb[3, tm$it], color = colourvalues::colour_values(tm$vb[3, ]))
## same as in rgl
rgl::triangles3d(xx, yy, tm$vb[3, tm$it], color = colourvalues::colour_values(tm$vb[3, ]))
rgl::aspect3d(1, 1, .1)
